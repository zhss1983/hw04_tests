----------------------- Проверка flake8 пройдена -----------------------

============================= test session starts ==============================
platform linux -- Python 3.7.4, pytest-5.3.5, py-1.8.1, pluggy-0.13.1 -- /usr/local/bin/python
django: settings: yatube.settings (from env)
rootdir: /app, inifile: pytest.ini
plugins: Faker-8.8.2, pythonpath-0.7.3, django-3.8.0
collecting ... collected 23 items

yatube/about/tests/test_urls.py::StaticURLTests::test_url_exists_at_desired_location PASSED [  4%]
yatube/about/tests/test_urls.py::StaticURLTests::test_url_uses_correct_template PASSED [  8%]
yatube/about/tests/test_urls.py::StaticURLTests::test_urls_name_correct PASSED [ 13%]
yatube/posts/tests/test_forms.py::PostsSaveTests::test_auth_user_edit_post_and_correct_redirect FAILED [ 17%]
yatube/posts/tests/test_forms.py::PostsSaveTests::test_auth_user_save_post_and_correct_redirect PASSED [ 21%]
yatube/posts/tests/test_forms.py::PostsSaveTests::test_posts_contain_form PASSED [ 26%]
yatube/posts/tests/test_models.py::PostModelTest::test_object_text_field PASSED [ 30%]
yatube/posts/tests/test_models.py::GroupModelTest::test_object_title_field PASSED [ 34%]
yatube/posts/tests/test_urls.py::PostsURLTests::test_absolute_url_path_by_name PASSED [ 39%]
yatube/posts/tests/test_urls.py::PostsURLTests::test_auth_url_exists_at_desired_location PASSED [ 43%]
yatube/posts/tests/test_urls.py::PostsURLTests::test_list_url_redirect_anonymous PASSED [ 47%]
yatube/posts/tests/test_urls.py::PostsURLTests::test_url_exists_at_desired_location FAILED [ 52%]
yatube/posts/tests/test_views.py::PostsURLTests::test_posts_contain_in_correct_group PASSED [ 56%]
yatube/posts/tests/test_views.py::PostsURLTests::test_url_uses_correct_template_auth_user PASSED [ 60%]
yatube/posts/tests/test_views.py::PostsURLTests::test_url_uses_correct_template_by_guest FAILED [ 65%]
yatube/posts/tests/test_views.py::PostsURLTests::test_wron_user_edit_post FAILED [ 69%]
yatube/posts/tests/test_views.py::PostsContextTests::test_posts_shows_correct_context FAILED [ 73%]
yatube/posts/tests/test_views.py::PaginatorViewsTest::test_my_paginator_return_context PASSED [ 78%]
yatube/posts/tests/test_views.py::PaginatorViewsTest::test_paginator_in_context FAILED [ 82%]
yatube/users/tests/test_urls.py::UsersURLTests::test_absolute_url_path_by_name PASSED [ 86%]
yatube/users/tests/test_urls.py::UsersURLTests::test_url_exists_at_desired_location PASSED [ 91%]
yatube/users/tests/test_views.py::UsersViewsTests::test_url_correct_template_name PASSED [ 95%]
yatube/yatube/tests/test_urls.py::StaticURLTests::test_homepage PASSED   [100%]

=================================== FAILURES ===================================
_________ PostsSaveTests.test_auth_user_edit_post_and_correct_redirect _________

self = <django.template.backends.django.Template object at 0x7f8a82cc7350>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]
request = <WSGIRequest: GET '/user/1/'>

    def render(self, context=None, request=None):
        context = make_context(context, request, autoescape=self.backend.engine.autoescape)
        try:
>           return self.template.render(context)

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cc7fd0>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render(self, context):
        "Display stage -- can be called many times"
        with context.render_context.push_state(self):
            if context.template is None:
                with context.bind_template(self):
                    context.template_name = self.name
>                   return self._render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cc7fd0>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<ExtendsNode: extends "base.html">]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render(self, context):
        compiled_parent = self.get_parent(context)
    
        if BLOCK_CONTEXT_KEY not in context.render_context:
            context.render_context[BLOCK_CONTEXT_KEY] = BlockContext()
        block_context = context.render_context[BLOCK_CONTEXT_KEY]
    
        # Add the block nodes from this node to the block context
        block_context.add_blocks(self.blocks)
    
        # If this block's parent doesn't have an extends node it is the root,
        # and its block nodes also need to be added to the block context.
        for node in compiled_parent.nodelist:
            # The ExtendsNode has to be the first non-text node.
            if not isinstance(node, TextNode):
                if not isinstance(node, ExtendsNode):
                    blocks = {n.name: n for n in
                              compiled_parent.nodelist.get_nodes_by_type(BlockNode)}
                    block_context.add_blocks(blocks)
                break
    
        # Call Template._render explicitly so the parser context stays
        # the same.
        with context.render_context.push_state(compiled_parent, isolated_context=False):
>           return compiled_parent._render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cdc110>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '<!doctype html>\n<html>\n\n '>, <Block Node: title. Contents: [<TextNode: '\n        The Last Social '>]>...   </main>'>, <django.template.loader_tags.IncludeNode object at 0x7f8a82cdc750>, <TextNode: '\n  </body>\n\n</html>'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render(self, context):
        block_context = context.render_context.get(BLOCK_CONTEXT_KEY)
        with context.push():
            if block_context is None:
                context['block'] = self
                result = self.nodelist.render(context)
            else:
                push = block = block_context.pop(self.name)
                if block is None:
                    block = self
                # Create new block so we can store context without thread-safety issues.
                block = type(self)(block.name, block.nodelist)
                block.context = context
                context['block'] = block
>               result = block.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '\n  <div class="row">\n    '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82c18a90>, <TextN...col-md-9'>, <django.template.loader_tags.IncludeNode object at 0x7f8a82c18c90>, <TextNode: '\n    </div>\n  </div>\n'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82c18a90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82c18a90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Edit post (grou>}]

    def render(self, context):
        """
        Render the specified template and context. Cache the template object
        in render_context to avoid reparsing and loading when used in a for
        loop.
        """
        template = self.template.resolve(context)
        # Does this quack like a Template?
        if not callable(getattr(template, 'render', None)):
            # If not, try the cache and get_template().
            template_name = template
            cache = context.render_context.dicts[0].setdefault(self, {})
            template = cache.get(template_name)
            if template is None:
>               template = context.template.engine.get_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
template_name = 'includes\\author_card.html'

    def get_template(self, template_name):
        """
        Return a compiled Template object for the given template name,
        handling template inheritance recursively.
        """
>       template, origin = self.find_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/engine.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
name = 'includes\\author_card.html', dirs = None, skip = None

    def find_template(self, name, dirs=None, skip=None):
        tried = []
        for loader in self.template_loaders:
            try:
                template = loader.get_template(name, skip=skip)
                return template, template.origin
            except TemplateDoesNotExist as e:
                tried.extend(e.tried)
>       raise TemplateDoesNotExist(name, tried=tried)
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/engine.py:129: TemplateDoesNotExist

The above exception was the direct cause of the following exception:

self = <posts.tests.test_forms.PostsSaveTests testMethod=test_auth_user_edit_post_and_correct_redirect>

    def test_auth_user_edit_post_and_correct_redirect(self):
        """Check edit post and correct redirect."""
        cls = self.__class__
        context_list = (
            {
                'group': cls.group.pk,
                'text': ('Edit post (group = '
                         f'{cls.group.pk}).  {id(cls.group)}')
            },
            {
                'group': '',
                'text': f'Edit post without group. {id(cls.group)}'
            },
        )
        for context in context_list:
            count = Post.objects.count()
            with self.subTest(url=cls.url_post_edit, context=context):
                response = cls.authorized_client.post(
                    cls.url_post_edit,
                    data=context
                )
                post = Post.objects.filter(text=context['text']).last()
>               self.assertRedirects(response, cls.url_post)

yatube/posts/tests/test_forms.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.7/site-packages/django/test/testcases.py:371: in assertRedirects
    redirect_response = response.client.get(path, QueryDict(query), secure=(scheme == 'https'))
/usr/local/lib/python3.7/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
/usr/local/lib/python3.7/site-packages/django/test/client.py:347: in get
    **extra,
/usr/local/lib/python3.7/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
/usr/local/lib/python3.7/site-packages/django/test/client.py:503: in request
    raise exc_value
/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
yatube/posts/views.py:71: in post_view
    return render(request, 'posts/post.html', {'post': post})
/usr/local/lib/python3.7/site-packages/django/shortcuts.py:36: in render
    content = loader.render_to_string(template_name, context, request, using=using)
/usr/local/lib/python3.7/site-packages/django/template/loader.py:62: in render_to_string
    return template.render(context, request)
/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:63: in render
    reraise(exc, self.backend)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

exc = TemplateDoesNotExist('includes\\author_card.html')
backend = <django.template.backends.django.DjangoTemplates object at 0x7f8a82f66a10>

    def reraise(exc, backend):
        """
        Reraise TemplateDoesNotExist while maintaining template debug information.
        """
        new = copy_exception(exc, backend)
>       raise new from exc
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:84: TemplateDoesNotExist
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /user/1/
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 61, in render
    return self.template.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 171, in render
    return self._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 150, in render
    return compiled_parent._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 62, in render
    result = block.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 176, in render
    template = context.template.engine.get_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 143, in get_template
    template, origin = self.find_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 129, in find_template
    raise TemplateDoesNotExist(name, tried=tried)
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/app/yatube/posts/views.py", line 71, in post_view
    return render(request, 'posts/post.html', {'post': post})
  File "/usr/local/lib/python3.7/site-packages/django/shortcuts.py", line 36, in render
    content = loader.render_to_string(template_name, context, request, using=using)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader.py", line 62, in render_to_string
    return template.render(context, request)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 63, in render
    reraise(exc, self.backend)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 84, in reraise
    raise new from exc
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html
______________ PostsURLTests.test_url_exists_at_desired_location _______________

self = <django.template.backends.django.Template object at 0x7f8a828be7d0>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]
request = <WSGIRequest: GET '/user/'>

    def render(self, context=None, request=None):
        context = make_context(context, request, autoescape=self.backend.engine.autoescape)
        try:
>           return self.template.render(context)

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a8275ed90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        "Display stage -- can be called many times"
        with context.render_context.push_state(self):
            if context.template is None:
                with context.bind_template(self):
                    context.template_name = self.name
>                   return self._render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a8275ed90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<ExtendsNode: extends "base.html">]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        compiled_parent = self.get_parent(context)
    
        if BLOCK_CONTEXT_KEY not in context.render_context:
            context.render_context[BLOCK_CONTEXT_KEY] = BlockContext()
        block_context = context.render_context[BLOCK_CONTEXT_KEY]
    
        # Add the block nodes from this node to the block context
        block_context.add_blocks(self.blocks)
    
        # If this block's parent doesn't have an extends node it is the root,
        # and its block nodes also need to be added to the block context.
        for node in compiled_parent.nodelist:
            # The ExtendsNode has to be the first non-text node.
            if not isinstance(node, TextNode):
                if not isinstance(node, ExtendsNode):
                    blocks = {n.name: n for n in
                              compiled_parent.nodelist.get_nodes_by_type(BlockNode)}
                    block_context.add_blocks(blocks)
                break
    
        # Call Template._render explicitly so the parser context stays
        # the same.
        with context.render_context.push_state(compiled_parent, isolated_context=False):
>           return compiled_parent._render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cdc110>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '<!doctype html>\n<html>\n\n '>, <Block Node: title. Contents: [<TextNode: '\n        The Last Social '>]>...   </main>'>, <django.template.loader_tags.IncludeNode object at 0x7f8a82cdc750>, <TextNode: '\n  </body>\n\n</html>'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        block_context = context.render_context.get(BLOCK_CONTEXT_KEY)
        with context.push():
            if block_context is None:
                context['block'] = self
                result = self.nodelist.render(context)
            else:
                push = block = block_context.pop(self.name)
                if block is None:
                    block = self
                # Create new block so we can store context without thread-safety issues.
                block = type(self)(block.name, block.nodelist)
                block.context = context
                context['block'] = block
>               result = block.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '\n  <div class="row">\n    '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>, <TextN...\n      '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82757590>, <TextNode: '\n    </div>\n  </div>\n'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        """
        Render the specified template and context. Cache the template object
        in render_context to avoid reparsing and loading when used in a for
        loop.
        """
        template = self.template.resolve(context)
        # Does this quack like a Template?
        if not callable(getattr(template, 'render', None)):
            # If not, try the cache and get_template().
            template_name = template
            cache = context.render_context.dicts[0].setdefault(self, {})
            template = cache.get(template_name)
            if template is None:
>               template = context.template.engine.get_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
template_name = 'includes\\author_card.html'

    def get_template(self, template_name):
        """
        Return a compiled Template object for the given template name,
        handling template inheritance recursively.
        """
>       template, origin = self.find_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/engine.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
name = 'includes\\author_card.html', dirs = None, skip = None

    def find_template(self, name, dirs=None, skip=None):
        tried = []
        for loader in self.template_loaders:
            try:
                template = loader.get_template(name, skip=skip)
                return template, template.origin
            except TemplateDoesNotExist as e:
                tried.extend(e.tried)
>       raise TemplateDoesNotExist(name, tried=tried)
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/engine.py:129: TemplateDoesNotExist

The above exception was the direct cause of the following exception:

self = <posts.tests.test_urls.PostsURLTests testMethod=test_url_exists_at_desired_location>

    def test_url_exists_at_desired_location(self):
        """Check addres available."""
        cls = self.__class__
        url_list = (
            cls.url_index,
            cls.url_profile,
            cls.url_group,
            cls.url_post,
        )
        for url in url_list:
            with self.subTest(url=url):
>               response = self.client.get(url)

yatube/posts/tests/test_urls.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.7/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
/usr/local/lib/python3.7/site-packages/django/test/client.py:347: in get
    **extra,
/usr/local/lib/python3.7/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
/usr/local/lib/python3.7/site-packages/django/test/client.py:503: in request
    raise exc_value
/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
yatube/posts/views.py:65: in profile
    return render(request, 'posts/profile.html', context)
/usr/local/lib/python3.7/site-packages/django/shortcuts.py:36: in render
    content = loader.render_to_string(template_name, context, request, using=using)
/usr/local/lib/python3.7/site-packages/django/template/loader.py:62: in render_to_string
    return template.render(context, request)
/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:63: in render
    reraise(exc, self.backend)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

exc = TemplateDoesNotExist('includes\\author_card.html')
backend = <django.template.backends.django.DjangoTemplates object at 0x7f8a82f66a10>

    def reraise(exc, backend):
        """
        Reraise TemplateDoesNotExist while maintaining template debug information.
        """
        new = copy_exception(exc, backend)
>       raise new from exc
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:84: TemplateDoesNotExist
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /user/
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 61, in render
    return self.template.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 171, in render
    return self._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 150, in render
    return compiled_parent._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 62, in render
    result = block.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 176, in render
    template = context.template.engine.get_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 143, in get_template
    template, origin = self.find_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 129, in find_template
    raise TemplateDoesNotExist(name, tried=tried)
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/app/yatube/posts/views.py", line 65, in profile
    return render(request, 'posts/profile.html', context)
  File "/usr/local/lib/python3.7/site-packages/django/shortcuts.py", line 36, in render
    content = loader.render_to_string(template_name, context, request, using=using)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader.py", line 62, in render_to_string
    return template.render(context, request)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 63, in render
    reraise(exc, self.backend)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 84, in reraise
    raise new from exc
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html
____________ PostsURLTests.test_url_uses_correct_template_by_guest _____________

self = <django.template.backends.django.Template object at 0x7f8a828d2750>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]
request = <WSGIRequest: GET '/user/'>

    def render(self, context=None, request=None):
        context = make_context(context, request, autoescape=self.backend.engine.autoescape)
        try:
>           return self.template.render(context)

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a8275ed90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        "Display stage -- can be called many times"
        with context.render_context.push_state(self):
            if context.template is None:
                with context.bind_template(self):
                    context.template_name = self.name
>                   return self._render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a8275ed90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<ExtendsNode: extends "base.html">]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        compiled_parent = self.get_parent(context)
    
        if BLOCK_CONTEXT_KEY not in context.render_context:
            context.render_context[BLOCK_CONTEXT_KEY] = BlockContext()
        block_context = context.render_context[BLOCK_CONTEXT_KEY]
    
        # Add the block nodes from this node to the block context
        block_context.add_blocks(self.blocks)
    
        # If this block's parent doesn't have an extends node it is the root,
        # and its block nodes also need to be added to the block context.
        for node in compiled_parent.nodelist:
            # The ExtendsNode has to be the first non-text node.
            if not isinstance(node, TextNode):
                if not isinstance(node, ExtendsNode):
                    blocks = {n.name: n for n in
                              compiled_parent.nodelist.get_nodes_by_type(BlockNode)}
                    block_context.add_blocks(blocks)
                break
    
        # Call Template._render explicitly so the parser context stays
        # the same.
        with context.render_context.push_state(compiled_parent, isolated_context=False):
>           return compiled_parent._render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cdc110>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '<!doctype html>\n<html>\n\n '>, <Block Node: title. Contents: [<TextNode: '\n        The Last Social '>]>...   </main>'>, <django.template.loader_tags.IncludeNode object at 0x7f8a82cdc750>, <TextNode: '\n  </body>\n\n</html>'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        block_context = context.render_context.get(BLOCK_CONTEXT_KEY)
        with context.push():
            if block_context is None:
                context['block'] = self
                result = self.nodelist.render(context)
            else:
                push = block = block_context.pop(self.name)
                if block is None:
                    block = self
                # Create new block so we can store context without thread-safety issues.
                block = type(self)(block.name, block.nodelist)
                block.context = context
                context['block'] = block
>               result = block.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '\n  <div class="row">\n    '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>, <TextN...\n      '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82757590>, <TextNode: '\n    </div>\n  </div>\n'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        """
        Render the specified template and context. Cache the template object
        in render_context to avoid reparsing and loading when used in a for
        loop.
        """
        template = self.template.resolve(context)
        # Does this quack like a Template?
        if not callable(getattr(template, 'render', None)):
            # If not, try the cache and get_template().
            template_name = template
            cache = context.render_context.dicts[0].setdefault(self, {})
            template = cache.get(template_name)
            if template is None:
>               template = context.template.engine.get_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
template_name = 'includes\\author_card.html'

    def get_template(self, template_name):
        """
        Return a compiled Template object for the given template name,
        handling template inheritance recursively.
        """
>       template, origin = self.find_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/engine.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
name = 'includes\\author_card.html', dirs = None, skip = None

    def find_template(self, name, dirs=None, skip=None):
        tried = []
        for loader in self.template_loaders:
            try:
                template = loader.get_template(name, skip=skip)
                return template, template.origin
            except TemplateDoesNotExist as e:
                tried.extend(e.tried)
>       raise TemplateDoesNotExist(name, tried=tried)
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/engine.py:129: TemplateDoesNotExist

The above exception was the direct cause of the following exception:

self = <posts.tests.test_views.PostsURLTests testMethod=test_url_uses_correct_template_by_guest>

    def test_url_uses_correct_template_by_guest(self):
        """Check matching of template name and URL address."""
        cls = self.__class__
        url_list = (
            (cls.url_index, 'posts/index.html'),
            (cls.url_profile, 'posts/profile.html'),
            (cls.url_post, 'posts/post.html'),
            (cls.url_group, 'posts/group.html'),
        )
        for url, template_name in url_list:
>           response = self.client.get(url)

yatube/posts/tests/test_views.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.7/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
/usr/local/lib/python3.7/site-packages/django/test/client.py:347: in get
    **extra,
/usr/local/lib/python3.7/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
/usr/local/lib/python3.7/site-packages/django/test/client.py:503: in request
    raise exc_value
/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
yatube/posts/views.py:65: in profile
    return render(request, 'posts/profile.html', context)
/usr/local/lib/python3.7/site-packages/django/shortcuts.py:36: in render
    content = loader.render_to_string(template_name, context, request, using=using)
/usr/local/lib/python3.7/site-packages/django/template/loader.py:62: in render_to_string
    return template.render(context, request)
/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:63: in render
    reraise(exc, self.backend)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

exc = TemplateDoesNotExist('includes\\author_card.html')
backend = <django.template.backends.django.DjangoTemplates object at 0x7f8a82f66a10>

    def reraise(exc, backend):
        """
        Reraise TemplateDoesNotExist while maintaining template debug information.
        """
        new = copy_exception(exc, backend)
>       raise new from exc
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:84: TemplateDoesNotExist
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /user/
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 61, in render
    return self.template.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 171, in render
    return self._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 150, in render
    return compiled_parent._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 62, in render
    result = block.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 176, in render
    template = context.template.engine.get_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 143, in get_template
    template, origin = self.find_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 129, in find_template
    raise TemplateDoesNotExist(name, tried=tried)
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/app/yatube/posts/views.py", line 65, in profile
    return render(request, 'posts/profile.html', context)
  File "/usr/local/lib/python3.7/site-packages/django/shortcuts.py", line 36, in render
    content = loader.render_to_string(template_name, context, request, using=using)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader.py", line 62, in render_to_string
    return template.render(context, request)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 63, in render
    reraise(exc, self.backend)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 84, in reraise
    raise new from exc
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html
____________________ PostsURLTests.test_wron_user_edit_post ____________________

self = <django.template.backends.django.Template object at 0x7f8a82829790>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]
request = <WSGIRequest: GET '/user/1/'>

    def render(self, context=None, request=None):
        context = make_context(context, request, autoescape=self.backend.engine.autoescape)
        try:
>           return self.template.render(context)

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cc7fd0>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render(self, context):
        "Display stage -- can be called many times"
        with context.render_context.push_state(self):
            if context.template is None:
                with context.bind_template(self):
                    context.template_name = self.name
>                   return self._render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cc7fd0>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<ExtendsNode: extends "base.html">]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render(self, context):
        compiled_parent = self.get_parent(context)
    
        if BLOCK_CONTEXT_KEY not in context.render_context:
            context.render_context[BLOCK_CONTEXT_KEY] = BlockContext()
        block_context = context.render_context[BLOCK_CONTEXT_KEY]
    
        # Add the block nodes from this node to the block context
        block_context.add_blocks(self.blocks)
    
        # If this block's parent doesn't have an extends node it is the root,
        # and its block nodes also need to be added to the block context.
        for node in compiled_parent.nodelist:
            # The ExtendsNode has to be the first non-text node.
            if not isinstance(node, TextNode):
                if not isinstance(node, ExtendsNode):
                    blocks = {n.name: n for n in
                              compiled_parent.nodelist.get_nodes_by_type(BlockNode)}
                    block_context.add_blocks(blocks)
                break
    
        # Call Template._render explicitly so the parser context stays
        # the same.
        with context.render_context.push_state(compiled_parent, isolated_context=False):
>           return compiled_parent._render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cdc110>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '<!doctype html>\n<html>\n\n '>, <Block Node: title. Contents: [<TextNode: '\n        The Last Social '>]>...   </main>'>, <django.template.loader_tags.IncludeNode object at 0x7f8a82cdc750>, <TextNode: '\n  </body>\n\n</html>'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render(self, context):
        block_context = context.render_context.get(BLOCK_CONTEXT_KEY)
        with context.push():
            if block_context is None:
                context['block'] = self
                result = self.nodelist.render(context)
            else:
                push = block = block_context.pop(self.name)
                if block is None:
                    block = self
                # Create new block so we can store context without thread-safety issues.
                block = type(self)(block.name, block.nodelist)
                block.context = context
                context['block'] = block
>               result = block.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '\n  <div class="row">\n    '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82c18a90>, <TextN...col-md-9'>, <django.template.loader_tags.IncludeNode object at 0x7f8a82c18c90>, <TextNode: '\n    </div>\n  </div>\n'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82c18a90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82c18a90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'post': <Post: Тест Тест Тест >}]

    def render(self, context):
        """
        Render the specified template and context. Cache the template object
        in render_context to avoid reparsing and loading when used in a for
        loop.
        """
        template = self.template.resolve(context)
        # Does this quack like a Template?
        if not callable(getattr(template, 'render', None)):
            # If not, try the cache and get_template().
            template_name = template
            cache = context.render_context.dicts[0].setdefault(self, {})
            template = cache.get(template_name)
            if template is None:
>               template = context.template.engine.get_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
template_name = 'includes\\author_card.html'

    def get_template(self, template_name):
        """
        Return a compiled Template object for the given template name,
        handling template inheritance recursively.
        """
>       template, origin = self.find_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/engine.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
name = 'includes\\author_card.html', dirs = None, skip = None

    def find_template(self, name, dirs=None, skip=None):
        tried = []
        for loader in self.template_loaders:
            try:
                template = loader.get_template(name, skip=skip)
                return template, template.origin
            except TemplateDoesNotExist as e:
                tried.extend(e.tried)
>       raise TemplateDoesNotExist(name, tried=tried)
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/engine.py:129: TemplateDoesNotExist

The above exception was the direct cause of the following exception:

self = <posts.tests.test_views.PostsURLTests testMethod=test_wron_user_edit_post>

    def test_wron_user_edit_post(self):
        """Check redirect from edit_post page for an unauthorized user."""
        cls = self.__class__
        authorized_client = Client()
        other_user = User.objects.create(
            username='other_user',
        )
        authorized_client.force_login(other_user)
        response = authorized_client.get(cls.url_post_edit)
>       self.assertRedirects(response, cls.url_post)

yatube/posts/tests/test_views.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.7/site-packages/django/test/testcases.py:371: in assertRedirects
    redirect_response = response.client.get(path, QueryDict(query), secure=(scheme == 'https'))
/usr/local/lib/python3.7/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
/usr/local/lib/python3.7/site-packages/django/test/client.py:347: in get
    **extra,
/usr/local/lib/python3.7/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
/usr/local/lib/python3.7/site-packages/django/test/client.py:503: in request
    raise exc_value
/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
yatube/posts/views.py:71: in post_view
    return render(request, 'posts/post.html', {'post': post})
/usr/local/lib/python3.7/site-packages/django/shortcuts.py:36: in render
    content = loader.render_to_string(template_name, context, request, using=using)
/usr/local/lib/python3.7/site-packages/django/template/loader.py:62: in render_to_string
    return template.render(context, request)
/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:63: in render
    reraise(exc, self.backend)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

exc = TemplateDoesNotExist('includes\\author_card.html')
backend = <django.template.backends.django.DjangoTemplates object at 0x7f8a82f66a10>

    def reraise(exc, backend):
        """
        Reraise TemplateDoesNotExist while maintaining template debug information.
        """
        new = copy_exception(exc, backend)
>       raise new from exc
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:84: TemplateDoesNotExist
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /user/1/
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 61, in render
    return self.template.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 171, in render
    return self._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 150, in render
    return compiled_parent._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 62, in render
    result = block.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 176, in render
    template = context.template.engine.get_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 143, in get_template
    template, origin = self.find_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 129, in find_template
    raise TemplateDoesNotExist(name, tried=tried)
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/app/yatube/posts/views.py", line 71, in post_view
    return render(request, 'posts/post.html', {'post': post})
  File "/usr/local/lib/python3.7/site-packages/django/shortcuts.py", line 36, in render
    content = loader.render_to_string(template_name, context, request, using=using)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader.py", line 62, in render_to_string
    return template.render(context, request)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 63, in render
    reraise(exc, self.backend)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 84, in reraise
    raise new from exc
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html
______________ PostsContextTests.test_posts_shows_correct_context ______________

self = <django.template.backends.django.Template object at 0x7f8a828518d0>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]
request = <WSGIRequest: GET '/user/'>

    def render(self, context=None, request=None):
        context = make_context(context, request, autoescape=self.backend.engine.autoescape)
        try:
>           return self.template.render(context)

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a8275ed90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        "Display stage -- can be called many times"
        with context.render_context.push_state(self):
            if context.template is None:
                with context.bind_template(self):
                    context.template_name = self.name
>                   return self._render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a8275ed90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<ExtendsNode: extends "base.html">]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        compiled_parent = self.get_parent(context)
    
        if BLOCK_CONTEXT_KEY not in context.render_context:
            context.render_context[BLOCK_CONTEXT_KEY] = BlockContext()
        block_context = context.render_context[BLOCK_CONTEXT_KEY]
    
        # Add the block nodes from this node to the block context
        block_context.add_blocks(self.blocks)
    
        # If this block's parent doesn't have an extends node it is the root,
        # and its block nodes also need to be added to the block context.
        for node in compiled_parent.nodelist:
            # The ExtendsNode has to be the first non-text node.
            if not isinstance(node, TextNode):
                if not isinstance(node, ExtendsNode):
                    blocks = {n.name: n for n in
                              compiled_parent.nodelist.get_nodes_by_type(BlockNode)}
                    block_context.add_blocks(blocks)
                break
    
        # Call Template._render explicitly so the parser context stays
        # the same.
        with context.render_context.push_state(compiled_parent, isolated_context=False):
>           return compiled_parent._render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cdc110>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '<!doctype html>\n<html>\n\n '>, <Block Node: title. Contents: [<TextNode: '\n        The Last Social '>]>...   </main>'>, <django.template.loader_tags.IncludeNode object at 0x7f8a82cdc750>, <TextNode: '\n  </body>\n\n</html>'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        block_context = context.render_context.get(BLOCK_CONTEXT_KEY)
        with context.push():
            if block_context is None:
                context['block'] = self
                result = self.nodelist.render(context)
            else:
                push = block = block_context.pop(self.name)
                if block is None:
                    block = self
                # Create new block so we can store context without thread-safety issues.
                block = type(self)(block.name, block.nodelist)
                block.context = context
                context['block'] = block
>               result = block.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '\n  <div class="row">\n    '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>, <TextN...\n      '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82757590>, <TextNode: '\n    </div>\n  </div>\n'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 0, 'page': <Page 1 of 1>, 'author': <User: user>}]

    def render(self, context):
        """
        Render the specified template and context. Cache the template object
        in render_context to avoid reparsing and loading when used in a for
        loop.
        """
        template = self.template.resolve(context)
        # Does this quack like a Template?
        if not callable(getattr(template, 'render', None)):
            # If not, try the cache and get_template().
            template_name = template
            cache = context.render_context.dicts[0].setdefault(self, {})
            template = cache.get(template_name)
            if template is None:
>               template = context.template.engine.get_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
template_name = 'includes\\author_card.html'

    def get_template(self, template_name):
        """
        Return a compiled Template object for the given template name,
        handling template inheritance recursively.
        """
>       template, origin = self.find_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/engine.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
name = 'includes\\author_card.html', dirs = None, skip = None

    def find_template(self, name, dirs=None, skip=None):
        tried = []
        for loader in self.template_loaders:
            try:
                template = loader.get_template(name, skip=skip)
                return template, template.origin
            except TemplateDoesNotExist as e:
                tried.extend(e.tried)
>       raise TemplateDoesNotExist(name, tried=tried)
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/engine.py:129: TemplateDoesNotExist

The above exception was the direct cause of the following exception:

self = <posts.tests.test_views.PostsContextTests testMethod=test_posts_shows_correct_context>

    def test_posts_shows_correct_context(self):
        """Check specific context, not paginator context."""
        cls = self.__class__
        year = dt.today().year
        url_list = (
            (
                cls.url_profile,
                ('author', cls.user),
                ('year', year),
            ),
            (
                cls.url_group,
                ('group', cls.group),
                ('year', year),
            ),
            (
                cls.url_post,
                ('post', cls.post),
                ('year', year),
            ),
            (
                cls.url_new_post,
                ('edit', False),
                ('year', year),
            ),
            (
                cls.url_post_edit,
                ('edit', True),
                ('year', year),
            ),
        )
        for url, *context in url_list:
>           response = cls.authorized_client.get(url)

yatube/posts/tests/test_views.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.7/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
/usr/local/lib/python3.7/site-packages/django/test/client.py:347: in get
    **extra,
/usr/local/lib/python3.7/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
/usr/local/lib/python3.7/site-packages/django/test/client.py:503: in request
    raise exc_value
/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
yatube/posts/views.py:65: in profile
    return render(request, 'posts/profile.html', context)
/usr/local/lib/python3.7/site-packages/django/shortcuts.py:36: in render
    content = loader.render_to_string(template_name, context, request, using=using)
/usr/local/lib/python3.7/site-packages/django/template/loader.py:62: in render_to_string
    return template.render(context, request)
/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:63: in render
    reraise(exc, self.backend)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

exc = TemplateDoesNotExist('includes\\author_card.html')
backend = <django.template.backends.django.DjangoTemplates object at 0x7f8a82f66a10>

    def reraise(exc, backend):
        """
        Reraise TemplateDoesNotExist while maintaining template debug information.
        """
        new = copy_exception(exc, backend)
>       raise new from exc
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:84: TemplateDoesNotExist
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /user/
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 61, in render
    return self.template.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 171, in render
    return self._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 150, in render
    return compiled_parent._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 62, in render
    result = block.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 176, in render
    template = context.template.engine.get_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 143, in get_template
    template, origin = self.find_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 129, in find_template
    raise TemplateDoesNotExist(name, tried=tried)
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/app/yatube/posts/views.py", line 65, in profile
    return render(request, 'posts/profile.html', context)
  File "/usr/local/lib/python3.7/site-packages/django/shortcuts.py", line 36, in render
    content = loader.render_to_string(template_name, context, request, using=using)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader.py", line 62, in render_to_string
    return template.render(context, request)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 63, in render
    reraise(exc, self.backend)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 84, in reraise
    raise new from exc
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html
_________________ PaginatorViewsTest.test_paginator_in_context _________________

self = <django.template.backends.django.Template object at 0x7f8a82ca5090>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]
request = <WSGIRequest: GET '/user/'>

    def render(self, context=None, request=None):
        context = make_context(context, request, autoescape=self.backend.engine.autoescape)
        try:
>           return self.template.render(context)

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a8275ed90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render(self, context):
        "Display stage -- can be called many times"
        with context.render_context.push_state(self):
            if context.template is None:
                with context.bind_template(self):
                    context.template_name = self.name
>                   return self._render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a8275ed90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<ExtendsNode: extends "base.html">]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ExtendsNode: extends "base.html">
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render(self, context):
        compiled_parent = self.get_parent(context)
    
        if BLOCK_CONTEXT_KEY not in context.render_context:
            context.render_context[BLOCK_CONTEXT_KEY] = BlockContext()
        block_context = context.render_context[BLOCK_CONTEXT_KEY]
    
        # Add the block nodes from this node to the block context
        block_context.add_blocks(self.blocks)
    
        # If this block's parent doesn't have an extends node it is the root,
        # and its block nodes also need to be added to the block context.
        for node in compiled_parent.nodelist:
            # The ExtendsNode has to be the first non-text node.
            if not isinstance(node, TextNode):
                if not isinstance(node, ExtendsNode):
                    blocks = {n.name: n for n in
                              compiled_parent.nodelist.get_nodes_by_type(BlockNode)}
                    block_context.add_blocks(blocks)
                break
    
        # Call Template._render explicitly so the parser context stays
        # the same.
        with context.render_context.push_state(compiled_parent, isolated_context=False):
>           return compiled_parent._render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.base.Template object at 0x7f8a82cdc110>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def instrumented_test_render(self, context):
        """
        An instrumented Template render method, providing a signal that can be
        intercepted by the test Client.
        """
        template_rendered.send(sender=self, template=self, context=context)
>       return self.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/test/utils.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '<!doctype html>\n<html>\n\n '>, <Block Node: title. Contents: [<TextNode: '\n        The Last Social '>]>...   </main>'>, <django.template.loader_tags.IncludeNode object at 0x7f8a82cdc750>, <TextNode: '\n  </body>\n\n</html>'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Block Node: content. Contents: [<TextNode: '\n          Контент не под'>]>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render(self, context):
        block_context = context.render_context.get(BLOCK_CONTEXT_KEY)
        with context.push():
            if block_context is None:
                context['block'] = self
                result = self.nodelist.render(context)
            else:
                push = block = block_context.pop(self.name)
                if block is None:
                    block = self
                # Create new block so we can store context without thread-safety issues.
                block = type(self)(block.name, block.nodelist)
                block.context = context
                context['block'] = block
>               result = block.nodelist.render(context)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [<TextNode: '\n  <div class="row">\n    '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>, <TextN...\n      '>, <django.template.loader_tags.IncludeNode object at 0x7f8a82757590>, <TextNode: '\n    </div>\n  </div>\n'>]
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render(self, context):
        bits = []
        for node in self:
            if isinstance(node, Node):
>               bit = node.render_annotated(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render_annotated(self, context):
        """
        Render the node. If debug is True and an exception occurs during
        rendering, the exception is annotated with contextual line information
        where it occurred in the template. For internal usage this method is
        preferred over using the render method directly.
        """
        try:
>           return self.render(context)

/usr/local/lib/python3.7/site-packages/django/template/base.py:904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.loader_tags.IncludeNode object at 0x7f8a82757b90>
context = [{'True': True, 'False': False, 'None': None}, {}, {}, {'from_page': 2, 'to_page': 2, 'page': <Page 1 of 6>, 'author': <User: user>}]

    def render(self, context):
        """
        Render the specified template and context. Cache the template object
        in render_context to avoid reparsing and loading when used in a for
        loop.
        """
        template = self.template.resolve(context)
        # Does this quack like a Template?
        if not callable(getattr(template, 'render', None)):
            # If not, try the cache and get_template().
            template_name = template
            cache = context.render_context.dicts[0].setdefault(self, {})
            template = cache.get(template_name)
            if template is None:
>               template = context.template.engine.get_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
template_name = 'includes\\author_card.html'

    def get_template(self, template_name):
        """
        Return a compiled Template object for the given template name,
        handling template inheritance recursively.
        """
>       template, origin = self.find_template(template_name)

/usr/local/lib/python3.7/site-packages/django/template/engine.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.template.engine.Engine object at 0x7f8a82c728d0>
name = 'includes\\author_card.html', dirs = None, skip = None

    def find_template(self, name, dirs=None, skip=None):
        tried = []
        for loader in self.template_loaders:
            try:
                template = loader.get_template(name, skip=skip)
                return template, template.origin
            except TemplateDoesNotExist as e:
                tried.extend(e.tried)
>       raise TemplateDoesNotExist(name, tried=tried)
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/engine.py:129: TemplateDoesNotExist

The above exception was the direct cause of the following exception:

self = <posts.tests.test_views.PaginatorViewsTest testMethod=test_paginator_in_context>

    def test_paginator_in_context(self):
        """ """
        cls = self.__class__
        check_context = (
            cls.url_index,
            cls.url_group,
            cls.url_profile,
        )
        for url in check_context:
>           response = cls.authorized_client.get(url)

yatube/posts/tests/test_views.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.7/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
/usr/local/lib/python3.7/site-packages/django/test/client.py:347: in get
    **extra,
/usr/local/lib/python3.7/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
/usr/local/lib/python3.7/site-packages/django/test/client.py:503: in request
    raise exc_value
/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
yatube/posts/views.py:65: in profile
    return render(request, 'posts/profile.html', context)
/usr/local/lib/python3.7/site-packages/django/shortcuts.py:36: in render
    content = loader.render_to_string(template_name, context, request, using=using)
/usr/local/lib/python3.7/site-packages/django/template/loader.py:62: in render_to_string
    return template.render(context, request)
/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:63: in render
    reraise(exc, self.backend)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

exc = TemplateDoesNotExist('includes\\author_card.html')
backend = <django.template.backends.django.DjangoTemplates object at 0x7f8a82f66a10>

    def reraise(exc, backend):
        """
        Reraise TemplateDoesNotExist while maintaining template debug information.
        """
        new = copy_exception(exc, backend)
>       raise new from exc
E       django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

/usr/local/lib/python3.7/site-packages/django/template/backends/django.py:84: TemplateDoesNotExist
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /user/
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 61, in render
    return self.template.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 171, in render
    return self._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 150, in render
    return compiled_parent._render(context)
  File "/usr/local/lib/python3.7/site-packages/django/test/utils.py", line 96, in instrumented_test_render
    return self.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 62, in render
    result = block.nodelist.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 937, in render
    bit = node.render_annotated(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/base.py", line 904, in render_annotated
    return self.render(context)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader_tags.py", line 176, in render
    template = context.template.engine.get_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 143, in get_template
    template, origin = self.find_template(template_name)
  File "/usr/local/lib/python3.7/site-packages/django/template/engine.py", line 129, in find_template
    raise TemplateDoesNotExist(name, tried=tried)
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/app/yatube/posts/views.py", line 65, in profile
    return render(request, 'posts/profile.html', context)
  File "/usr/local/lib/python3.7/site-packages/django/shortcuts.py", line 36, in render
    content = loader.render_to_string(template_name, context, request, using=using)
  File "/usr/local/lib/python3.7/site-packages/django/template/loader.py", line 62, in render_to_string
    return template.render(context, request)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 63, in render
    reraise(exc, self.backend)
  File "/usr/local/lib/python3.7/site-packages/django/template/backends/django.py", line 84, in reraise
    raise new from exc
django.template.exceptions.TemplateDoesNotExist: includes\author_card.html
========================= 6 failed, 17 passed in 2.55s =========================
======================== Ваши тесты не работают ======================== 